{"version":3,"sources":["Home.js","Details.js","Calculator.js","Chart.js","MyBitcoin.js","components/Layout.js","components/NavigationBar.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","showCurrency","bind","euro","document","getElementById","fetch","response","json","bitcoinData","innerHTML","usDollar","yen","pound","Intl","NumberFormat","style","format","this","showBitcoinInEuro","showBitcoinInUsDollar","showBitcoinInAud","showBitcoinInNzd","showBitcoinInGbP","window","addEventListener","className","Jumbotron","ListGroup","ListGroupItem","id","Component","Details","marketcapPres","marketcap","endResult","unconfTransactions","unconfTrans","hashrateId","hashrate","transactionsId","transactions","weightedPriceId","weightedPrice","showMarketcap","showUnconfTransactions","showHashrate","showTransaction","showWeightedPrices","Row","Col","xs","Card","CardBody","CardTitle","CardSubtitle","CardText","Calculator","convertEuroToBitcoin","convertUsDollarToBitcoin","convertAudToBitcoin","convertNzdToBitcoin","convertGbpToBitcoin","checkCurrencySelection","bitcoinInEuro","inputCurrency","value","solution","bitcoinInUSD","showSolution","bitcoinInAud","bitcoinInNzd","bitcoinInGbp","Input","type","placeholder","name","fontWeight","Button","onClick","Chart","MyBitcoin","Layout","Container","children","Styles","styled","div","NavigationBar","Navbar","expand","fixed","Brand","href","src","width","height","alt","Toggle","aria-controls","Collapse","Nav","Item","Link","App","Fragment","exact","path","component","Boolean","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.097f5499.chunk.js","sourcesContent":["import React, { Component } from \"react\"\nimport { Jumbotron } from \"react-bootstrap\";\nimport { ListGroup, ListGroupItem } from \"react-bootstrap\";\nimport { Button } from \"react-bootstrap\";\nimport styled from \"styled-components\";\nimport \"./App.css\";\n\n\nclass Home extends Component{\n\n    constructor(props){\n        super(props);\n        \n        this.showCurrency = this.showCurrency.bind(this);\n    }  \n\n    async showBitcoinInEuro(){\n        let euro = document.getElementById(\"bitcoinToEuro\");\n        const url = \"https://blockchain.info/ticker\";\n        const response = await fetch(url);\n        const bitcoinData = await response.json();\n        euro.innerHTML = bitcoinData[\"EUR\"][\"15m\"] +  \" \" + bitcoinData[\"EUR\"][\"symbol\"];\n    }\n\n    async showBitcoinInUsDollar(){\n        let usDollar = document.getElementById(\"bitcoinToUsDollar\");\n        const url = \"https://blockchain.info/ticker\";\n        const response = await fetch(url);\n        const bitcoinData = await response.json();\n        usDollar.innerHTML = bitcoinData[\"USD\"][\"15m\"] +  \" \" + bitcoinData[\"USD\"][\"symbol\"];\n    }    \n\n    async showBitcoinInAud(){\n        let yen = document.getElementById(\"bitcoinToAud\");\n        const url = \"https://blockchain.info/ticker\";\n        const response = await fetch(url);\n        const bitcoinData = await response.json();\n        yen.innerHTML = bitcoinData[\"AUD\"][\"15m\"] +  \" \" + bitcoinData[\"AUD\"][\"symbol\"];\n    }\n\n    async showBitcoinInNzd(){\n        let yen = document.getElementById(\"bitcoinToNzd\");\n        const url = \"https://blockchain.info/ticker\";\n        const response = await fetch(url);\n        const bitcoinData = await response.json();\n        yen.innerHTML = bitcoinData[\"NZD\"][\"15m\"] +  \" \" + bitcoinData[\"NZD\"][\"symbol\"];\n    }\n\n    async showBitcoinInGbP(){\n        let pound = document.getElementById(\"bitcoinToPound\");\n        const url = \"https://blockchain.info/ticker\";\n        const response = await fetch(url);\n        const bitcoinData = await response.json();\n        let endResult = new Intl.NumberFormat(\"de-De\", { style: \"decimal\" }).format(bitcoinData);\n        pound.innerHTML = bitcoinData[\"GBP\"][\"15m\"] +  \" \" + bitcoinData[\"GBP\"][\"symbol\"];\n    }\n\n    showCurrency(){\n        this.showBitcoinInEuro();\n        this.showBitcoinInUsDollar();\n        this.showBitcoinInAud();\n        this.showBitcoinInNzd();\n        this.showBitcoinInGbP();\n    }\n\n    componentDidMount(){\n        window.addEventListener(\"load\", this.showCurrency());\n    }\n  \n    render(){\n        return(\n            <div className=\"page\">\n                <br></br>          \n                <h1>Home</h1>\n                <br></br>\n                <Jumbotron>\n                    <p>1 Bitcoin entspricht...</p>\n                    <ListGroup>\n                        <ListGroupItem>Euro: <span id=\"bitcoinToEuro\"></span></ListGroupItem>\n                        <ListGroupItem>US-Dollar: <span id=\"bitcoinToUsDollar\"></span></ListGroupItem>\n                        <ListGroupItem>Australische Dollar: <span id=\"bitcoinToAud\"></span></ListGroupItem>\n                        <ListGroupItem>Neuseeländische Dollar: <span id=\"bitcoinToNzd\"></span></ListGroupItem>\n                        <ListGroupItem>Pfund: <span id=\"bitcoinToPound\"></span></ListGroupItem>\n                    </ListGroup>\n                    <br></br>\n                </Jumbotron>\n            </div>\n        );\n    }\n}\n\nexport default Home;","import React, { Component } from \"react\"\nimport { Jumbotron } from \"react-bootstrap\";\nimport { Card, CardImg, CardText, CardBody, CardTitle, CardSubtitle, } from 'reactstrap';\nimport { Container, Row, Col } from 'reactstrap';\n\nclass Details extends Component{\n\n    constructor(props){\n        super(props);\n    }\n\n    async showMarketcap(){\n        let url = \"https://blockchain.info/q/marketcap\";\n        let marketcapPres = document.getElementById(\"marketcap\");\n        const response = await fetch(url);\n        const marketcap = await response.json();\n        let endResult = new Intl.NumberFormat(\"de-De\", { style: \"decimal\" }).format(marketcap);\n        marketcapPres.innerHTML = \"akuell: \" + endResult;\n    }\n\n    async showUnconfTransactions(){\n        let url = \"https://blockchain.info/q/unconfirmedcount\";\n        let unconfTransactions = document.getElementById(\"unconfTransactions\");\n        const response = await fetch(url);\n        const unconfTrans = await response.json();\n        let endResult = new Intl.NumberFormat(\"de-De\", { style: \"decimal\" }).format(unconfTrans);\n        unconfTransactions.innerHTML = \"aktuell: \" + endResult;\n    }\n\n    async showHashrate(){\n        let url = \"https://blockchain.info/q/hashrate\";\n        let hashrateId = document.getElementById(\"hashrate\");\n        const response = await fetch(url);\n        const hashrate = await response.json() * 1000;\n        let endResult = new Intl.NumberFormat(\"de-De\", { style: \"decimal\" }).format(hashrate);\n        hashrateId.innerHTML = \"aktuell: \" + endResult + \" TH/s\";\n    }\n\n    async showTransaction(){\n        let url = \"https://blockchain.info/q/24hrtransactioncount\";\n        let transactionsId = document.getElementById(\"transactions\");\n        const response = await fetch(url);\n        const transactions = await response.json();\n        let endResult = new Intl.NumberFormat(\"de-De\", { style: \"decimal\" }).format(transactions);\n        transactionsId.innerHTML = \"aktuell: \" + endResult;\n    }\n\n    async showWeightedPrices(){\n        let url = \"https://blockchain.info/q/24hrprice\";\n        let weightedPriceId = document.getElementById(\"weightedPrice\");\n        const response = await fetch(url);\n        const weightedPrice = await response.json();\n        let endResult = new Intl.NumberFormat(\"de-De\", { style: \"decimal\" }).format(weightedPrice);\n        weightedPriceId.innerHTML = \"aktuell: \" + endResult;\n    }\n\n    componentDidMount(){\n        window.addEventListener(\"load\", \n        this.showMarketcap(), \n        this.showUnconfTransactions(), \n        this.showHashrate(),\n        this.showTransaction(),\n        this.showWeightedPrices()\n        ); \n    }\n\n    render(){\n        return(\n            <div className=\"page\">\n                <br></br>\n                <h1>Details & News</h1>\n                <br></br>\n                <Jumbotron>\n                    <Row>\n                        <Col xs=\"6\">\n                            <Card>\n                                <CardBody>\n                                <CardTitle><h4>Marktkapitalisierung</h4></CardTitle>\n                                <br></br>\n                                <CardSubtitle id=\"marketcap\"></CardSubtitle>\n                                <br></br>\n                                <CardText>\n                                    Die Marktkapitalisierung ergibt sich aus dem Produkt von Bitcoin-Wert und der sich aktuell im Umlauf befindenen Anzahl an Bitcoins\n                                    <br></br>\n                                    Marktkapitalisierung = Bitcoin Kurs * Anzahl Bitcoins\n                                </CardText>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                        <Col xs=\"6\">\n                            <Card>\n                                <CardBody>\n                                <CardTitle><h4>schwebende Transaktionen</h4></CardTitle>\n                                <br></br>\n                                <CardSubtitle id=\"unconfTransactions\"></CardSubtitle>\n                                <br></br>\n                                <CardText>\n                                    Gibt die Anzahl der momentan schwebenden (unbestätigten) Transaktionen an.\n                                </CardText>\n                                </CardBody>\n                            </Card>\n                        </Col>\n                    </Row>\n                    <br></br>\n                    <Row>\n                        <Col xs=\"6\">\n                                <Card>\n                                    <CardBody>\n                                    <CardTitle><h4>Hashrate</h4></CardTitle>\n                                    <br></br>\n                                    <CardSubtitle id=\"hashrate\"></CardSubtitle>\n                                    <br></br>\n                                    <CardText>\n                                        Die Hashrate ist eine Maßeinheit für die Rechenleistung des Bitcoin-Netzwerks. \n                                        Eine Hashrate von 10 TH/s bedeutet, dass 10 Billionen Berechnungen pro Sekunde durchgeführt werden.\n                                    </CardText>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                            <Col xs=\"6\">\n                                <Card>\n                                    <CardBody>\n                                    <CardTitle><h4>Transaktionen</h4></CardTitle>\n                                    <br></br>\n                                    <CardSubtitle id=\"transactions\"></CardSubtitle>\n                                    <br></br>\n                                    <CardText>\n                                        Anzahl der Transaktionen innerhalb der letzten 24 Stunden.\n                                    </CardText>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                        </Row>\n                        <br></br>\n                        <Row>\n                            <Col xs=\"6\">\n                                <Card>\n                                    <CardBody>\n                                    <CardTitle><h4>gewichteter Durchschnitsspreis</h4></CardTitle>\n                                    <br></br>\n                                    <CardSubtitle id=\"weightedPrice\"></CardSubtitle>\n                                    <br></br>\n                                    <CardText>\n                                        Gibt den gewichteten Durchschnitsspreis eines Bitcoin im Verhältnis zum Gesamtvolumen innerhalb eines vorgegebenen Zeithorizonts an.\n                                    </CardText>\n                                    </CardBody>\n                                </Card>\n                            </Col>\n                        </Row>\n                </Jumbotron>\n               \n            </div>\n        );\n    }\n}\n\nexport default Details;","import React, { Component } from \"react\";\nimport { Jumbotron } from \"react-bootstrap\";\nimport { Button, Form, FormGroup, Label, Input, FormText } from 'reactstrap';\nimport { Container, Row, Col } from 'reactstrap';\nimport \"./App.css\";\n\nclass Calculator extends Component{\n    \n    constructor(props){\n        super(props);\n        this.convertEuroToBitcoin = this.convertEuroToBitcoin.bind(this);\n        this.convertUsDollarToBitcoin = this.convertUsDollarToBitcoin.bind(this);\n        this.convertAudToBitcoin= this.convertAudToBitcoin.bind(this);\n        this.convertNzdToBitcoin = this.convertNzdToBitcoin.bind(this);\n        this.convertGbpToBitcoin = this.convertGbpToBitcoin.bind(this);\n        this.checkCurrencySelection = this.checkCurrencySelection.bind(this);\n    }\n\n   async convertEuroToBitcoin(){\n        const url = \"https://blockchain.info/ticker\";\n        const response = await fetch(url);\n        const bitcoinData = await response.json();\n        let bitcoinInEuro = bitcoinData[\"EUR\"][\"15m\"];\n        let inputCurrency = document.getElementById(\"inputCurrency\").value;\n        let solution = inputCurrency / bitcoinInEuro;\n        solution = new Intl.NumberFormat(\"de-De\", { style: \"decimal\" }).format(solution);\n        let showSolution = document.getElementById(\"showSolution\");\n        showSolution.innerHTML = solution + \" BTC\";\n   }\n\n    async convertUsDollarToBitcoin(){\n        const url = \"https://blockchain.info/ticker\";\n        const response = await fetch(url);\n        const bitcoinData = await response.json();\n        let bitcoinInUSD = bitcoinData[\"USD\"][\"15m\"];\n        let inputCurrency = document.getElementById(\"inputCurrency\").value;\n        let solution = inputCurrency / bitcoinInUSD;\n        solution = new Intl.NumberFormat(\"de-De\", { style: \"decimal\" }).format(solution);\n        let showSolution = document.getElementById(\"showSolution\").innerHTML;\n        showSolution = solution + \" BTC\";\n        return showSolution;\n    }\n\n    async convertAudToBitcoin(){\n        const url = \"https://blockchain.info/ticker\";\n        const response = await fetch(url);\n        const bitcoinData = await response.json();\n        let bitcoinInAud = bitcoinData[\"AUD\"][\"15m\"];\n        let inputCurrency = document.getElementById(\"inputCurrency\").value;\n        let solution = inputCurrency / bitcoinInAud;\n        solution = new Intl.NumberFormat(\"de-De\", { style: \"decimal\" }).format(solution);\n        let showSolution = document.getElementById(\"showSolution\");\n        showSolution.innerHTML = solution + \" BTC\";\n    }\n\n    async convertNzdToBitcoin(){\n        const url = \"https://blockchain.info/ticker\";\n        const response = await fetch(url);\n        const bitcoinData = await response.json();\n        let bitcoinInNzd= bitcoinData[\"NZD\"][\"15m\"];\n        let inputCurrency = document.getElementById(\"inputCurrency\").value;\n        let solution = inputCurrency / bitcoinInNzd;\n        solution = new Intl.NumberFormat(\"de-De\", { style: \"decimal\" }).format(solution);\n        let showSolution = document.getElementById(\"showSolution\");\n        showSolution.innerHTML = solution + \" BTC\";\n   }\n\n    async convertGbpToBitcoin(){\n        const url = \"https://blockchain.info/ticker\";\n        const response = await fetch(url);\n        const bitcoinData = await response.json();\n        let bitcoinInGbp = bitcoinData[\"GBP\"][\"15m\"];\n        let inputCurrency = document.getElementById(\"inputCurrency\").value;\n        let solution = inputCurrency / bitcoinInGbp;\n        solution = new Intl.NumberFormat(\"de-De\", { style: \"decimal\" }).format(solution);\n        let showSolution = document.getElementById(\"showSolution\");\n        showSolution.innerHTML = solution + \" BTC\";\n    }\n\n    checkCurrencySelection(){\n        if(document.getElementById(\"wishedCurrency\").value == \"eur\"){\n            this.convertEuroToBitcoin();\n        }\n        if(document.getElementById(\"wishedCurrency\").value == \"usd\"){\n            this.convertUsDollarToBitcoin();\n        }\n        if(document.getElementById(\"wishedCurrency\").value == \"aud\"){\n            this.convertAudToBitcoin();\n        }\n        if(document.getElementById(\"wishedCurrency\").value == \"nzd\"){\n            this.convertNzdToBitcoin();\n        }\n        if(document.getElementById(\"wishedCurrency\").value == \"gbp\"){\n            this.convertGbpToBitcoin();\n        }\n    }\n\n    render(){\n        return(\n            <div className=\"page\">\n                <br></br>\n                <h1>Umrechner</h1>\n                <br></br>\n                <Jumbotron>\n\n                    <Row>\n                    <Col><Input type=\"text\" id=\"inputCurrency\" placeholder=\"Betrag\" ></Input></Col>\n                    <Col>\n                    <Input type=\"select\" name=\"select\" id=\"wishedCurrency\">\n                        <option value=\"eur\">EUR</option>\n                        <option value=\"usd\">USD</option>\n                        <option value=\"aud\">AUD</option>\n                        <option value=\"nzd\">NZD</option>\n                        <option value=\"gbp\">GBP</option>\n                    </Input></Col>\n                    </Row>\n                \n                    <br></br>\n\n                    <p id=\"showSolution\" fontWeight=\"bold\">0 BTC</p>\n\n                    <Button id=\"button\" onClick={ this.checkCurrencySelection }>umrechnen</Button>\n\n                </Jumbotron>\n                \n            </div>\n        );\n    }\n}\n\nexport default Calculator;\n\n","import React, { Component } from \"react\"\nimport { Jumbotron } from \"react-bootstrap\";\nimport Line from \"react-chartjs-2\";\n\nclass Chart extends Component{\n\n    constructor(props){\n        super(props);\n    }\n\n    /*LineChart () {\n        const data = {\n          labels: [\n            'Jan',\n            'Feb',\n            'Mar',\n            'April',\n            'May'\n          ],\n          datasets: [\n            {\n              label: 'Sales 2020 (M)',\n              data: [3, 2, 2, 1, 5],\n              borderColor: ['rgba(255, 206, 86, 0.2)'],\n              backgroundColor: ['rgba(255, 206, 86, 0.2)'],\n              pointBackgroundColor: 'rgba(255, 206, 86, 0.2)',\n              pointBorderColor: 'rgba(255, 206, 86, 0.2)'\n            },\n            {\n              label: 'Sales 2019 (M)',\n              data: [1, 3, 2, 2, 3],\n              borderColor: ['rgba(54, 162, 235, 0.2)'],\n              backgroundColor: ['rgba(54, 162, 235, 0.2)'],\n              pointBackgroundColor: 'rgba(54, 162, 235, 0.2)',\n              pointBorderColor: 'rgba(54, 162, 235, 0.2)'\n            }\n          ]\n        }\n      \n        const options = {\n          title: {\n            display: true,\n            text: 'Line Chart'\n          },\n          scales: {\n            yAxes: [\n              {\n                ticks: {\n                  min: 0,\n                  max: 6,\n                  stepSize: 1\n                }\n              }\n            ]\n          }\n        }\n      \n      }*/\n    \n    render(){\n        return(\n            <div className=\"page\">\n                <br></br>\n                <h1>Diagramm</h1>\n                <br></br>\n                <Jumbotron>\n                    <Line></Line>\n                </Jumbotron>\n            </div>\n        );\n    }\n}\n\nexport default Chart;","import React, { Component } from \"react\"\nimport { Jumbotron } from \"react-bootstrap\";\n\nclass MyBitcoin extends Component{\n\n    constructor(props){\n        super(props);\n    }\n\n    render(){\n        return(\n            <div className=\"page\">\n                <br></br>\n                <h1>Meine Bitcoin</h1>\n                <br></br>\n\n                <Jumbotron></Jumbotron>\n            </div>\n        );\n    }\n\n}\n\nexport default MyBitcoin;","import React from \"react\";\nimport { Components, Container } from \"react-bootstrap\";\n\nexport const Layout = (props) => (\n    <Container>\n        { props.children }\n    </Container>\n)","import React, { Component } from \"react\";\nimport { Nav, Navbar} from \"react-bootstrap\";\nimport \"../App.css\";\nimport styled from \"styled-components\";\nimport { render } from \"@testing-library/react\";\n\nfunction selectNav(){\n    let selection = document.getElementsByClassName(\"selectNav\");\n    this.setState({\n        bgColor: \"orange\"\n    })\n}\n\nconst Styles = styled.div`\n    .navbar{\n        background-color: #d8d8d8;\n    }\n\n    .navbar-brand{\n        color: orange;\n        font-weight: bold;\n    }\n\n    .nav-item: hover{\n        border-bottom: 4px solid orange;\n    } \n    \n    .nav-item > .acive > a{\n        border-bottom: 4px solid orange;\n    }\n    \n`;\n\nexport const NavigationBar = () => (\n    <Styles>\n        <Navbar expand=\"lg\" fixed=\"top\"> \n            <Navbar.Brand href=\"/\"><img id=\"bitcoinIcon\" src=\"https://cdn.pixabay.com/photo/2015/08/27/11/20/bitcoin-910307_960_720.png\" width=\"30\" height=\"30\" className=\"d-inline-block align-top\" alt=\"\"></img>itcoin</Navbar.Brand>\n            <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n            <Navbar.Collapse id=\"basic-navbar-nav\">\n                <Nav className=\"ml-auto\" > \n                    <Nav.Item><Nav.Link className=\"selectNav\" href=\"/\">Home</Nav.Link></Nav.Item>\n                    <Nav.Item><Nav.Link className=\"selectNav\" href=\"/details\">Details & News</Nav.Link></Nav.Item>\n                    <Nav.Item><Nav.Link className=\"selectNav\" href=\"/calculator\">Umrechner</Nav.Link></Nav.Item>\n                    <Nav.Item><Nav.Link className=\"selectNav\" href=\"/chart\">Diagramm</Nav.Link></Nav.Item>\n                    <Nav.Item><Nav.Link className=\"selectNav\" href=\"/myBitcoin\">Meine Bitcoin</Nav.Link></Nav.Item>\n                </Nav>\n            </Navbar.Collapse>\n        </Navbar>\n    </Styles>\n)\n\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Home from \"./Home\";\nimport Details from \"./Details\";\nimport Calculator from \"./Calculator\";\nimport Chart from \"./Chart\";\nimport MyBitcoin from \"./MyBitcoin\";\nimport { Layout } from \"./components/Layout\";\nimport { NavigationBar } from \"./components/NavigationBar\";\n\nclass App extends Component{\n  render(){\n    return (\n      <React.Fragment>\n        <NavigationBar/>\n        <Layout>\n          <Router>\n            <Switch>\n              <Route exact path=\"/\" component={ Home } />\n              <Route path=\"/details\" component={ Details} />\n              <Route path=\"/calculator\" component={ Calculator } />\n              <Route path=\"/chart\" component={ Chart } />\n              <Route path=\"/myBitcoin\" component={ MyBitcoin } />\n            </Switch>\n          </Router>\n        </Layout>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}